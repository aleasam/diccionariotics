class TerminosController < PrivadoController
  # GET /terminos
  # GET /terminos.json
  def index
    @terminos = Termino.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @terminos }
    end
  end

  # GET /terminos/1
  # GET /terminos/1.json
  def show
    @termino = Termino.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.json { render json: @termino }
    end
  end

  # GET /terminos/new
  # GET /terminos/new.json
  def new
    @termino = Termino.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @termino }
    end
  end

  # GET /terminos/1/edit
  def edit
    @termino = Termino.find(params[:id])
  end

  # POST /terminos
  # POST /terminos.json
  def create
    @termino = Termino.new(params[:termino])

    # if @termino.nombre=nil?
    #   :message "No puede tener espacios en blanco"

    respond_to do |format|
      if @termino.save
        format.html { redirect_to @termino, notice: 'Termino fue creado exitosamente.' }
        format.json { render json: @termino, status: :created, location: @termino }
      else
        format.html { render action: "new" }
        format.json { render json: @termino.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /terminos/1
  # PUT /terminos/1.json
  def update
    @termino = Termino.find(params[:id])

    respond_to do |format|
      if @termino.update_attributes(params[:termino])
        format.html { redirect_to @termino, notice: 'Termino was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: "edit" }
        format.json { render json: @termino.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /terminos/1
  # DELETE /terminos/1.json
  def destroy
    @termino = Termino.find(params[:id])
    @termino.destroy

    respond_to do |format|
      format.html { redirect_to terminos_url }
      format.json { head :no_content }
    end
  end
end
